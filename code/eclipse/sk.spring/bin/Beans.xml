<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop = "http://www.springframework.org/schema/aop"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
   
   <!-- bean definition inheritance -->
   <bean id = "beanDefinitionTemplate" abstract = "true">
   	<property name = "messageFr" value = "Hello France"/>
   	<property name = "messageGe" value = "Hello Germany"/>
   	<property name="message" value = "Hello Europe"/>
   </bean>
   
   <!-- parent is another bean's id, like definition template or another class -->
   <bean id = "message" class = "sk.spring.Message" parent = "beanDefinitionTemplate" init-method = "init" destroy-method = "dispose">
   	<!-- setter-based dependency injection -->
   	<property name = "message" value = "Hello World"/>
   </bean>
   
   <bean class = "sk.spring.Init"></bean>
   
   <bean id = "speaker" class = "sk.spring.Speaker" autowire="byName">
   	<!-- constructor-based dependency injection -->
   	<constructor-arg index = "1">
   		<!-- collection injection -->
   		<list>
   			<ref bean = "message"/>
   			<bean id = "innerMessage" class = "sk.spring.Message" parent = "beanDefinitionTemplate"></bean>
   		</list>
   	</constructor-arg>
   	<constructor-arg index = "0" value = "Kirk"></constructor-arg>
   </bean>
   
   <!-- register application event handler and publisher -->
   <bean id = "eventHandler" class = "sk.spring.EventHandler"/>
   <bean id = "eventPuslisher" class = "sk.spring.EventPublisher"/>
   
   <!-- XML-based AOP -->
   <aop:config>
   	<aop:aspect id = "log" ref = "aspect">
   		<aop:pointcut id = "select" expression="execution(* sk.spring.Message.*(..))"/>
   		<!-- <aop:after pointcut-ref = "select" method = "afterReturnAdvice"/> -->
   	</aop:aspect>
   </aop:config>
   
   <!-- enable @AspectJ annotation-based AOP -->
   <!-- <aop:aspectj-autoproxy/> -->
   
   <bean id = "aspect" class = "sk.spring.Aspect"/>
</beans>